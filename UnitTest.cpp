/*
    Unit Test file
*/

#include "gtest/gtest.h"
#include "functions.cpp"

// Array Comparison function inspired by Fraser from https://stackoverflow.com/questions/10060110/how-does-gtest-compare-the-values-in-two-arrays
::testing::AssertionResult ArraysMatch(int* expected, int* actual, int size){
    for (int i = 0; i < size; i++){
        if (expected[i] != actual[i]){
            return ::testing::AssertionFailure() << "array[" << i
                << "] (" << actual[i] << ") != expected[" << i
                << "] (" << expected[i] << ")";
        }
    }

    return ::testing::AssertionSuccess();
}

// 1x1 to 4x4
TEST(NNTest, Test1){
    int input[1] = {0};
    int output[4] = {0,0,0,0};
    EXPECT_TRUE(ArraysMatch(output,nearestNeighbor(1,2,input), 4));
};

// 2x2 to 4x4
TEST(NNTest, Test2){
    int input[4] = {1,2,3,4};
    int output[16] = {1,1,2,2,1,1,2,2,3,3,4,4,3,3,4,4};
    EXPECT_TRUE(ArraysMatch(output,nearestNeighbor(2,4,input), 16));
};

// 2x2 to 4x4 - wrong
TEST(NNTest, Test2_1){
    int input[4] = {1,2,3,4};
    int output[16] = {1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4};
    EXPECT_FALSE(ArraysMatch(output,nearestNeighbor(2,4,input), 16));
};

// 3x3 to 6x6
TEST(NNTest, Test3){
    int input[9] = {1,2,3,4,5,6,7,8,9};
    int output[36] = {1,1,2,2,3,3,1,1,2,2,3,3,4,4,5,5,6,6,4,4,5,5,6,6,7,7,8,8,9,9,7,7,8,8,9,9,};
    EXPECT_TRUE(ArraysMatch(output,nearestNeighbor(3,6,input), 36));
};

// 5x5 to 10x10
TEST(NNTest, Test4){
    int input[25] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25};
    int output[100] = {1,1,2,2,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,6,6,7,7,8,8,9,9,10,10,
                        11,11,12,12,13,13,14,14,15,15,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,
                        20,20,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,21,21,22,22,23,23,24,24,25,25};
    EXPECT_TRUE(ArraysMatch(output,nearestNeighbor(5,10,input), 100));
};


// 10x10 to 20x20
TEST(NNTest, Test5){
    int input[100] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
                        36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,
                        74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};
    int output[400] = {1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,
                        17,17,18,18,19,19,20,20,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,
                        27,27,28,28,29,29,30,30,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,
                        37,37,38,38,39,39,40,40,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,
                        47,47,48,48,49,49,50,50,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,
                        57,57,58,58,59,59,60,60,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,
                        67,67,68,68,69,69,70,70,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,
                        77,77,78,78,79,79,80,80,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,
                        87,87,88,88,89,89,90,90,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,
                        97,97,98,98,99,99,100,100,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100};
    EXPECT_TRUE(ArraysMatch(output,nearestNeighbor(10,20,input), 400));
};

// 2x2 to 4x4
TEST(BilinearTest, Test1){
    int input[4] = {1,2,3,4};
    int output[16] = {1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3};
    EXPECT_TRUE(ArraysMatch(output,bilinear(2,4,input), 16));
};

int main(int argc, char**argv)
{
    testing::InitGoogleTest(&argc, argv);
        return RUN_ALL_TESTS();
}

